#! /bin/zsh
#  prompt

# Settings
PROMPT_USE_GIT=true
PROMPT_USE_SVN=true
PROMPT_USE_HG=true
PROMPT_EXPAND_GIT=false

# [user host MM/DD HH:MM:SS /path | git branch status | ... | return_code]
# ❯ *

setopt prompt_subst

# Colors and controls
local ASCII_RESET=$'%{\e[0m%}'
local ASCII_BOLD=$'%{\e[1m%}'
local NONROOT_COLOR=$'%{\e[0;32m%}'
local ROOT_COLOR=$'%{\e[0;33m%}'
local USER_COLOR="%(!.${ROOT_COLOR}.${NONROOT_COLOR})"
local PROMPT_COLOR=$'%{\e[0;32m%}'
if [[ ${EUID} == 0 ]] ; then
	PROMPT_COLOR=$'%{\e[0;31m%}'
fi
local HOST_COLOR=$'%{\e[0;33m%}'
local DATE_COLOR=$'%{\e[0;31m%}'
local TIME_COLOR=$'%{\e[0;34m%}'
local CYAN_COLOR=$'%{\e[0;36m%}'
local PINK_COLOR=$'%{\e[0;35m%}'
local ERROR_COLOR=$'%{\e[0;31m%}'

# Formatting
local LBR="${ASCII_RESET}${ASCII_BOLD}["
local RBR="${ASCII_RESET}${ASCII_BOLD}]"
local SEP="${ASCII_BOLD} | "
local RET=$'\n'

# Prefix
local USER_STR="${USER_COLOR}%n "
local HOST_STR="${HOST_COLOR}%m "
#local WINDOW_STR=$'%($WINDOW..'${PINK_COLOR}$'%'${WINDOW}$' )'
local DATETIME_STR="${DATE_COLOR}%D{%m/%d} ${TIME_COLOR}%D{%H:%M:%S} "
local PATH_STR="${ASCII_RESET}%45<...<%~"
local PROMPT_PREFIX="${USER_STR}${HOST_STR}${WINDOW_STR}${DATETIME_STR}${PATH_STR}"

# Return code
local STATUS_EXT="%(?..${SEP}${ERROR_COLOR}$?)"

# Prompt symbol
local SMBL="${RET}%(?.${PROMPT_COLOR}.${ERROR_COLOR})%(!.».›)${ASCII_RESET} "


update_prompt() {
	local GIT_EXT=""
	local SVN_EXT=""
	local HG_EXT=""

	# Git support
	if [ ${PROMPT_USE_GIT} == true ]; then
		local GIT_STATUS="$(git status 2>/dev/null)"
		if [[ ${GIT_STATUS} != "" ]] ; then
			local REFS=" $(git symbolic-ref HEAD 2>/dev/null | sed 's/.*\///')"
			REFS="${REFS#refs/heads/}"
			if [[ `echo ${GIT_STATUS} | grep "modified:"` != "" ]] ; then
				REFS="${REFS}${ASCII_RESET} ${PINK_COLOR}m" # Modified
				if [ ${PROMPT_EXPAND_GIT} == true ]; then
					REFS="${REFS}odified"
				fi
			elif [[ `echo ${GIT_STATUS} | grep "renamed:"` != "" ]] ; then
				REFS="${REFS}${ASCII_RESET} ${PINK_COLOR}m" # Modified as well
				if [ ${PROMPT_EXPAND_GIT} == true ]; then
					REFS="${REFS}odified"
				fi
			fi
			if [[ `echo ${GIT_STATUS} | grep "ahead of"` != "" ]] ; then
				REFS="${REFS}${ASCII_RESET} ${CYAN_COLOR}s" # Staged
				if [ ${PROMPT_EXPAND_GIT} == true ]; then
					REFS="${REFS}taged"
				fi
			fi 
			if [ ${PROMPT_EXPAND_GIT} == true ]; then
				local COMMIT=`git show | head -1 | sed 's/commit //'`
				REFS=${REFS}$' '${TIME_COLOR}$'['${ASCII_RESET}${COMMIT}${TIME_COLOR}$']'
				if [[ `echo ${GIT_STATUS} | grep "Untracked"` != "" ]] ; then
					REFS="${REFS}${DATE_COLOR} untracked files"
				fi
				if [[ `echo ${GIT_STATUS} | grep "new file"` != "" ]] ; then
					REFS="${REFS}${HOST_COLOR} new files"
				fi
			fi
			GIT_EXT="${SEP}${HOST_COLOR}git${USER_COLOR}${REFS}${ASCII_RESET}"
		fi
	fi

	# SVN support
	if [ ${PROMPT_USE_SVN} == true ]; then
		if [ -e .svn ] ; then
			local SVN_STATUS=`svn info 2>/dev/null`
			if [[ ${SVN_STATUS} != "" ]] ; then
				local REFS=" $(svn info | grep "Repository Root" | sed 's/.*\///')"
				if [[ `svn status | sed 's/ .*//' | grep M` != "" ]] ; then
					REFS="${REFS}${ASCII_RESET} ${PINK_COLOR}m" # Modified
				fi
				SVN_EXT="${SEP}${HOST_COLOR}svn${USER_COLOR}${REFS}${ASCII_RESET} "
			fi
		fi
	fi

	# Mercurial
	if [ ${PROMPT_USE_HG} == true ]; then
		if [ -e .hg ] ; then
			local REFS=" $(hg branch 2>/dev/null)"
			if [[ `hg status | sed 's/ .*//' | grep 'A'` != "" ]] ; then
				REFS="${REFS}${ASCII_RESET} ${PINK_COLOR}m" # modified
			fi
			HG_EXT="${SEP}${HOST_COLOR}hg${USER_COLOR}${REFS}${ASCII_RESET} "
		fi
	fi

	PROMPT="${LBR}${PROMPT_PREFIX}${GIT_EXT}${SVN_EXT}${HG_EXT}${STATUS_EXT}${RBR}${SMBL}"
}

